#!/usr/bin/env bash

#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


FWDIR="$(cd "`dirname $0`"/..; pwd)"
cd "$FWDIR"

exec python -u ./python/run-tests.py

exit


FAILED=0
LOG_FILE=unit-tests.log
START=$(date +"%s")

rm -f $LOG_FILE


function run_streaming_tests() {
    echo "Run streaming tests ..."

    KAFKA_ASSEMBLY_DIR="$FWDIR"/external/kafka-assembly
    JAR_PATH="${KAFKA_ASSEMBLY_DIR}/target/scala-${SPARK_SCALA_VERSION}"
    for f in "${JAR_PATH}"/spark-streaming-kafka-assembly-*.jar; do
      if [[ ! -e "$f" ]]; then
        echo "Failed to find Spark Streaming Kafka assembly jar in $KAFKA_ASSEMBLY_DIR" 1>&2
        echo "You need to build Spark with " \
             "'build/sbt assembly/assembly streaming-kafka-assembly/assembly' or" \
             "'build/mvn package' before running this program" 1>&2
        exit 1
      fi
      KAFKA_ASSEMBLY_JAR="$f"
    done

    export PYSPARK_SUBMIT_ARGS="--jars ${KAFKA_ASSEMBLY_JAR} pyspark-shell"
    run_test "pyspark.streaming.util"
    run_test "pyspark.streaming.tests"
}

echo "Running PySpark tests. Output is in python/$LOG_FILE."

export PYSPARK_PYTHON="python"

# Try to test with Python 2.6, since that's the minimum version that we support:
if [ $(which python2.6) ]; then
    export PYSPARK_PYTHON="python2.6"
fi

echo "Testing with Python version:"
$PYSPARK_PYTHON --version

run_core_tests
run_sql_tests
run_mllib_tests
run_ml_tests
run_streaming_tests

# Try to test with Python 3
if [ $(which python3.4) ]; then
    export PYSPARK_PYTHON="python3.4"
    echo "Testing with Python3.4 version:"
    $PYSPARK_PYTHON --version

    run_core_tests
    run_sql_tests
    run_mllib_tests
    run_ml_tests
    run_streaming_tests
fi

# Try to test with PyPy
if [ $(which pypy) ]; then
    export PYSPARK_PYTHON="pypy"
    echo "Testing with PyPy version:"
    $PYSPARK_PYTHON --version

    run_core_tests
    run_sql_tests
    run_streaming_tests
fi

if [[ $FAILED == 0 ]]; then
    now=$(date +"%s")
    echo -e "\033[32mTests passed \033[0min $(($now - $START)) seconds"
fi

# TODO: in the long-run, it would be nice to use a test runner like `nose`.
# The doctest fixtures are the current barrier to doing this.
